/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package praktikumcalc.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;
import javax.swing.table.JTableHeader;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.border.MatteBorder;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import praktikumcalc.Calculator;
import praktikumcalc.Streamer;

/**
 *
 * @author haffm
 */
public class MesswerteGUI extends javax.swing.JFrame {

    /**
     * Creates new form MesswerteGUI
     */
    public MesswerteGUI() {
        initComponents();
    }

    public Dimension getSpinnerSize(){
        return new Dimension(40,18);
    }
    public Dimension getComboBoxSize(){
        return new Dimension(77,22);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItemSelectAll = new javax.swing.JMenuItem();
        jMenuItemDeselectAll = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        tabbedPane = new javax.swing.JTabbedPane();
        splitHorizontal = new javax.swing.JSplitPane();
        upperSplitVertical = new javax.swing.JSplitPane();
        scrollPaneUpperText = new javax.swing.JScrollPane();
        textArea1 = new javax.swing.JTextArea();
        panelEdit = new javax.swing.JPanel();
        toolbarTable = new javax.swing.JToolBar();
        buttonLoadTable = new javax.swing.JButton();
        buttonSaveTable = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        labelColumns = new javax.swing.JLabel();
        spinnerColumns = new javax.swing.JSpinner();
        labelRows = new javax.swing.JLabel();
        spinnerRows = new javax.swing.JSpinner();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        buttonLinear = new javax.swing.JButton();
        buttonSquare = new javax.swing.JButton();
        buttonExponential = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        buttonCalc = new javax.swing.JButton();
        scrollPaneTable = new javax.swing.JScrollPane();
        tableValues = new javax.swing.JTable();
        lowerSplitVertical = new javax.swing.JSplitPane();
        scrollPaneLowerText = new javax.swing.JScrollPane();
        textArea2 = new javax.swing.JTextArea();
        panelGrahpic = new javax.swing.JPanel();
        toolbarGraphics = new javax.swing.JToolBar();
        labelX = new javax.swing.JLabel();
        comboBoxX = new javax.swing.JComboBox<>();
        labelY = new javax.swing.JLabel();
        comboBoxY = new javax.swing.JComboBox<>();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        buttonPaint = new javax.swing.JButton();
        buttonCalcGraphically = new javax.swing.JButton();
        labelUnsupported = new javax.swing.JLabel();

        jMenuItemSelectAll.setText("Select all columns");
        jPopupMenu1.add(jMenuItemSelectAll);

        jMenuItemDeselectAll.setText("Deselect all columns");
        jPopupMenu1.add(jMenuItemDeselectAll);
        jPopupMenu1.add(jSeparator5);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");
        jPopupMenu1.add(jCheckBoxMenuItem1);

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");
        jPopupMenu1.add(jCheckBoxMenuItem2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Praktikum - Rechner");
        setLocationByPlatform(true);

        splitHorizontal.setDividerLocation(400);
        splitHorizontal.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        upperSplitVertical.setDividerLocation(600);

        textArea1.setColumns(20);
        textArea1.setRows(5);
        scrollPaneUpperText.setViewportView(textArea1);

        upperSplitVertical.setRightComponent(scrollPaneUpperText);

        toolbarTable.setFloatable(false);
        toolbarTable.setRollover(true);

        buttonLoadTable.setText("Öffnen");
        buttonLoadTable.setToolTipText("Lädt die Tabelle aus einer Datei");
        buttonLoadTable.setFocusable(false);
        buttonLoadTable.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonLoadTable.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonLoadTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadTableActionPerformed(evt);
            }
        });
        toolbarTable.add(buttonLoadTable);

        buttonSaveTable.setText("Speichern");
        buttonSaveTable.setToolTipText("Speichert die Tabelle");
        buttonSaveTable.setFocusable(false);
        buttonSaveTable.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonSaveTable.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonSaveTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveTableActionPerformed(evt);
            }
        });
        toolbarTable.add(buttonSaveTable);
        toolbarTable.add(jSeparator4);

        labelColumns.setText("Spalten:");
        toolbarTable.add(labelColumns);

        spinnerColumns.setModel(new javax.swing.SpinnerNumberModel(3, 2, null, 1));
        spinnerColumns.setMaximumSize(getSpinnerSize());
        spinnerColumns.setMinimumSize(getSpinnerSize());
        spinnerColumns.setPreferredSize(getSpinnerSize());
        spinnerColumns.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerColumnsStateChanged(evt);
            }
        });
        toolbarTable.add(spinnerColumns);

        labelRows.setText("Zeilen:");
        toolbarTable.add(labelRows);

        spinnerRows.setModel(new javax.swing.SpinnerNumberModel(10, 1, null, 1));
        spinnerRows.setMaximumSize(getSpinnerSize());
        spinnerRows.setMinimumSize(getSpinnerSize());
        spinnerRows.setPreferredSize(getSpinnerSize());
        spinnerRows.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerRowsStateChanged(evt);
            }
        });
        toolbarTable.add(spinnerRows);
        toolbarTable.add(jSeparator1);

        buttonLinear.setText("Linear");
        buttonLinear.setToolTipText("Spalte linear fortsetzen");
        buttonLinear.setFocusable(false);
        buttonLinear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonLinear.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonLinear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLinearActionPerformed(evt);
            }
        });
        toolbarTable.add(buttonLinear);

        buttonSquare.setText("Quadratisch");
        buttonSquare.setToolTipText("Spalte quadratisch fortsetzen");
        buttonSquare.setFocusable(false);
        buttonSquare.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonSquare.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonSquare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSquareActionPerformed(evt);
            }
        });
        toolbarTable.add(buttonSquare);

        buttonExponential.setText("Exponentiell");
        buttonExponential.setToolTipText("Spalte exponentiell fortsetzen");
        buttonExponential.setFocusable(false);
        buttonExponential.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonExponential.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonExponential.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExponentialActionPerformed(evt);
            }
        });
        toolbarTable.add(buttonExponential);
        toolbarTable.add(jSeparator2);

        buttonCalc.setText("Berechnen");
        buttonCalc.setToolTipText("Berechnet eine Auswahl von Werten");
        buttonCalc.setComponentPopupMenu(jPopupMenu1);
        buttonCalc.setFocusable(false);
        buttonCalc.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonCalc.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCalcActionPerformed(evt);
            }
        });
        toolbarTable.add(buttonCalc);

        String[] names = new String[] {"Messwert","x","y"};
        columnNames = new Vector<String>(Arrays.asList(names));
        tableValues.setModel(new MyTableModel(
            new Object [][] {
                { new Integer(1), null, null},
                { new Integer(2), null, null},
                { new Integer(3), null, null},
                { new Integer(4), null, null},
                { new Integer(5), null, null},
                { new Integer(6), null, null},
                { new Integer(7), null, null},
                { new Integer(8), null, null},
                { new Integer(9), null, null},
                { new Integer(10), null, null}
            }, names));
            renamePopup = new JPopupMenu();
            textPopup = new JTextField();
            header = tableValues.getTableHeader();

            header.addMouseListener(new MouseAdapter(){
                @Override
                public void mouseClicked(MouseEvent event){
                    if (event.getClickCount() == 2){
                        editColumnAt(event.getPoint());
                    }
                }
            });

            textPopup.setBorder(null);
            textPopup.addActionListener(new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    renameColumn();
                }
            });

            renamePopup.setBorder(new MatteBorder(0, 1, 1, 1, Color.DARK_GRAY));
            renamePopup.add(textPopup);
            scrollPaneTable.setViewportView(tableValues);

            javax.swing.GroupLayout panelEditLayout = new javax.swing.GroupLayout(panelEdit);
            panelEdit.setLayout(panelEditLayout);
            panelEditLayout.setHorizontalGroup(
                panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(toolbarTable, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
                .addComponent(scrollPaneTable, javax.swing.GroupLayout.Alignment.TRAILING)
            );
            panelEditLayout.setVerticalGroup(
                panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelEditLayout.createSequentialGroup()
                    .addComponent(toolbarTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(scrollPaneTable, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE))
            );

            upperSplitVertical.setLeftComponent(panelEdit);

            splitHorizontal.setTopComponent(upperSplitVertical);

            lowerSplitVertical.setDividerLocation(500);

            textArea2.setColumns(20);
            textArea2.setRows(5);
            scrollPaneLowerText.setViewportView(textArea2);

            lowerSplitVertical.setRightComponent(scrollPaneLowerText);

            toolbarGraphics.setFloatable(false);
            toolbarGraphics.setRollover(true);

            labelX.setText("X-Achse:");
            toolbarGraphics.add(labelX);

            comboBoxX.setModel(new MyComboBoxModel(0));
            comboBoxX.setMaximumSize(getComboBoxSize());
            comboBoxX.setMinimumSize(getComboBoxSize());
            comboBoxX.setPreferredSize(getComboBoxSize());
            toolbarGraphics.add(comboBoxX);

            labelY.setText("Y-Achse");
            toolbarGraphics.add(labelY);

            comboBoxY.setModel(new MyComboBoxModel(1));
            comboBoxY.setMaximumSize(getComboBoxSize());
            comboBoxY.setMinimumSize(getComboBoxSize());
            comboBoxY.setPreferredSize(getComboBoxSize());
            toolbarGraphics.add(comboBoxY);
            toolbarGraphics.add(jSeparator3);

            buttonPaint.setText("Zeichnen");
            buttonPaint.setToolTipText("Zeichnet die Punkte aus der Tabelle in ein Diagramm ein");
            buttonPaint.setEnabled(false);
            buttonPaint.setFocusable(false);
            buttonPaint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            buttonPaint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            toolbarGraphics.add(buttonPaint);

            buttonCalcGraphically.setText("Berechnen");
            buttonCalcGraphically.setToolTipText("Berechnet verschiedene Werte, die Punkte im Diagramm betreffend");
            buttonCalcGraphically.setFocusable(false);
            buttonCalcGraphically.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            buttonCalcGraphically.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            buttonCalcGraphically.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    buttonCalcGraphicallyActionPerformed(evt);
                }
            });
            toolbarGraphics.add(buttonCalcGraphically);

            labelUnsupported.setText("Grafische Anzeige noch nicht unterstützt");

            javax.swing.GroupLayout panelGrahpicLayout = new javax.swing.GroupLayout(panelGrahpic);
            panelGrahpic.setLayout(panelGrahpicLayout);
            panelGrahpicLayout.setHorizontalGroup(
                panelGrahpicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(toolbarGraphics, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelUnsupported, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
            panelGrahpicLayout.setVerticalGroup(
                panelGrahpicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelGrahpicLayout.createSequentialGroup()
                    .addComponent(toolbarGraphics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(labelUnsupported, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE))
            );

            lowerSplitVertical.setLeftComponent(panelGrahpic);

            splitHorizontal.setRightComponent(lowerSplitVertical);

            tabbedPane.addTab("tab1", splitHorizontal);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 963, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(tabbedPane)
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private class MyTableModel extends DefaultTableModel{
        public MyTableModel(Object[][] values, String[] names){
            super(values, names);
        }
        public void setColumnName(String newName, int column){
            if(column < super.columnIdentifiers.size())
                super.columnIdentifiers.set(column, newName);
        }
        @Override
        public Class getColumnClass(int columnIndex) {
            return columnIndex == 0 ? Integer.class : Double.class;
        }
        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex > 0;
        }
        @Override
        public void setRowCount(int count) {
            int lastRows = getRowCount();
            super.setRowCount(count);
            for(int i=lastRows; i<getRowCount(); i++)
                setValueAt(i+1, i, 0);
        }
    }
    private class MyComboBoxModel extends DefaultComboBoxModel<String>{
        private int prefer;
        public MyComboBoxModel(int preferredSelection){
            super(new String[]{});
            prefer = preferredSelection;
            fireTableColumnsChanged();
        }
        public void fireTableColumnsChanged(){
            int selected = getIndexOf(getSelectedItem());
            removeAllElements();
            MyTableModel m = (MyTableModel)tableValues.getModel();
            for(int i=1; i<tableValues.getColumnCount(); i++){
                //String el = m.getColumnName(i);
                addElement(m.getColumnName(i));
            }
            if(selected != -1 && selected < getSize())
                setSelectedItem(getElementAt(selected));
            else if(getSize() > prefer)
                setSelectedItem(getElementAt(prefer));
            else if(getSize() > 0)
                setSelectedItem(getElementAt(0));
        }
    }
    private void buttonLinearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLinearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonLinearActionPerformed

    private void spinnerColumnsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerColumnsStateChanged
        int c = (Integer)spinnerColumns.getValue();
        ((MyTableModel)tableValues.getModel()).setColumnCount(c);
        ((MyComboBoxModel)comboBoxX.getModel()).fireTableColumnsChanged();
        ((MyComboBoxModel)comboBoxY.getModel()).fireTableColumnsChanged();
        if(c == 2)
            disableGraphics();
        else
            enableGraphics();
    }//GEN-LAST:event_spinnerColumnsStateChanged

    private void disableGraphics(){
        buttonCalcGraphically.setEnabled(false);
        buttonPaint.setEnabled(false);
    }
    private void enableGraphics(){
        buttonCalcGraphically.setEnabled(true);
        //buttonPaint.setEnabled(true);
    }
    
    private void spinnerRowsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerRowsStateChanged
        //MyTableModel m = (MyTableModel)tableValues.getModel();
        ((MyTableModel)tableValues.getModel()).setRowCount((Integer)spinnerRows.getValue());
    }//GEN-LAST:event_spinnerRowsStateChanged

    private void buttonSquareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSquareActionPerformed
        String s1 = "";
        //for(int i=1; i<tableValues.getColumnCount(); i++){
            Double[] column = new Double[2*tableValues.getRowCount()];
            for(int j=0; j<tableValues.getRowCount(); j++){
                column[2*j] = (Double) tableValues.getValueAt(j,1);
                column[2*j+1] = (Double) tableValues.getValueAt(j,2);
            }
                //System.out.print(tableValues.getValueAt(j, i)+", ");
            //System.out.println();
            //s1+="Spalte \""+tableValues.getColumnName(i)+"\":\n";
            double md = Calculator.mittelwert(column);
            s1+="\tMittelwert: "+md+"\n";
            s1+="\tStandardabweichung: "+Calculator.standardabweichung(column, md)+"\n";
        //}
        textArea1.setText(s1);
    }//GEN-LAST:event_buttonSquareActionPerformed

    private void buttonExponentialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExponentialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonExponentialActionPerformed

    private void buttonCalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCalcActionPerformed
        String s1 = "";
        for(int i=1; i<tableValues.getColumnCount(); i++){
            Double[] column = new Double[tableValues.getRowCount()];
            for(int j=0; j<tableValues.getRowCount(); j++)
                column[j] = (Double) tableValues.getValueAt(j,i);
                //System.out.print(tableValues.getValueAt(j, i)+", ");
            //System.out.println();
            s1+="Spalte \""+tableValues.getColumnName(i)+"\":\n";
            double md = Calculator.mittelwert(column);
            s1+="\tMittelwert: "+md+"\n";
            s1+="\tStandardabweichung: "+Calculator.standardabweichung(column, md)+"\n";
        }
        textArea1.setText(s1);
    }//GEN-LAST:event_buttonCalcActionPerformed

    private void buttonCalcGraphicallyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCalcGraphicallyActionPerformed
        String xColumn = (String)comboBoxX.getSelectedItem(), yColumn = (String)comboBoxY.getSelectedItem();
        int xCol = -1, yCol = -1;
        for(int i=1; i<tableValues.getColumnCount(); i++){
            if(tableValues.getColumnName(i).equals(xColumn)){
                xCol = i;
                if(yCol != -1)
                    i = tableValues.getColumnCount();
            }else if(tableValues.getColumnName(i).equals(yColumn)){
                yCol = i;
                if(xCol != -1)
                    i = tableValues.getColumnCount();
            }
        }
        Double[][] points = new Double[tableValues.getRowCount()][2];
        for(int i=0; i<tableValues.getRowCount(); i++){
            Double x = (Double)tableValues.getValueAt(i, xCol), y = (Double)tableValues.getValueAt(i, yCol);
            if(x != null && y != null)
                points[i] = new Double[]{x,y};
            else
                points[i] = null;
        }
        double xM = Calculator.mittelwertX(points), yM = Calculator.mittelwertY(points);
        double a = Calculator.a(points, xM, yM), b = yM-a*xM;
        double sigmaY = Calculator.sigmaY(a, b, points), sigmaA = Calculator.sigmaA(sigmaY, points, xM),
                sigmaB = Calculator.sigmaB(sigmaY, points, xM);
        
        String s = "Rechnerische Geradenanpassung:\n";
        s+="\tMittelwert von "+xColumn+": "+xM+", Mittelwert von "+yColumn+": "+yM+"\n";
        s+="\ta = "+a+", b = "+b+"\n";
        s+="\tsigmaY = "+sigmaY+", sigmaA = "+sigmaA+", sigmaB = "+sigmaB+"\n\n";
        
        textArea2.append(s);
    }//GEN-LAST:event_buttonCalcGraphicallyActionPerformed

    private void buttonSaveTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveTableActionPerformed
        JFileChooser chooser = new JFileChooser();
        File file = null;
        if(chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION && (file = chooser.getSelectedFile()) != null){
            if(file.exists()){
                JOptionPane.showMessageDialog(null, "Datei existiert bereits.", "Praktikum - Rechner", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String datS = encodeTable2();
            try{
                Streamer.writeData(datS.getBytes(java.nio.charset.StandardCharsets.UTF_8), file, false);
                JOptionPane.showMessageDialog(null, "Tabelle gespeichert.", "Praktikum - Rechner", JOptionPane.PLAIN_MESSAGE);
            }catch(Streamer.StreamingException e){
                JOptionPane.showMessageDialog(null, "Tabelle konnte nicht gespeichert werden: "+e.getMessage(), "Praktikum - Rechner", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_buttonSaveTableActionPerformed

    private void buttonLoadTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadTableActionPerformed
        JFileChooser chooser = new JFileChooser();
        File file = null;
        if(chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION && (file = chooser.getSelectedFile()) != null){
            if(!file.exists()){
                JOptionPane.showMessageDialog(null, "Datei existiert nicht.", "Praktikum - Rechner", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String datS = null;
            try{
                datS = new String(Streamer.readData(file), java.nio.charset.StandardCharsets.UTF_8);
            }catch(Streamer.StreamingException e){
                JOptionPane.showMessageDialog(null, "Datei konnte nicht gelesen werden: "+e.getMessage(), "Praktikum - Rechner", JOptionPane.ERROR_MESSAGE);
                return;
            }
            decodeDatToTable2(datS);
            header.repaint();
            ((MyComboBoxModel)comboBoxX.getModel()).fireTableColumnsChanged();
            ((MyComboBoxModel)comboBoxY.getModel()).fireTableColumnsChanged();
        }
    }//GEN-LAST:event_buttonLoadTableActionPerformed

    private String encodeTable(){
        String datS = "";
        for(int i=1; i<tableValues.getColumnCount(); i++){
            datS+=tableValues.getColumnName(i)+":";
            for(int j=0; j<tableValues.getRowCount(); j++){
                datS+=tableValues.getValueAt(j, i);
                if(j!=tableValues.getRowCount()-1)
                    datS+=",";
            }
            if(i != tableValues.getColumnCount()-1)
                datS+="\r\n";
        }
        return datS;
    }
    private void decodeDatToTable(String datS){
        String[] columns = datS.split("\r\n");
        MyTableModel tbm = (MyTableModel)tableValues.getModel();
        tbm.setColumnCount(columns.length+1);
        for(int i=0; i<columns.length; i++){
            String[] split = columns[i].split(":");
            String[] rows = split[1].split(",");
            if(i==0) tbm.setRowCount(rows.length);
            tbm.setColumnName(split[0], i+1);
            header.getColumnModel().getColumn(i+1).setHeaderValue(split[0]);
            for(int j=0; j<rows.length; j++)
                tbm.setValueAt(!rows[j].equals("null") ? Double.parseDouble(rows[j]) : null, j, i+1);
        }
    }
    private String encodeTable2(){
        String datS = "#";
        for(int i=1; i<tableValues.getColumnCount(); i++){
            datS+=tableValues.getColumnName(i);
            if(i!=tableValues.getColumnCount()-1)
                datS+="\t";
        }
        datS+="\r\n";
        for(int i=0; i<tableValues.getRowCount(); i++){
            //datS+=tableValues.getColumnName(i)+":";
            for(int j=1; j<tableValues.getColumnCount(); j++){
                datS+=tableValues.getValueAt(i, j);
                if(j!=tableValues.getColumnCount()-1)
                    datS+="\t";
            }
            if(i != tableValues.getRowCount()-1)
                datS+="\r\n";
        }
        return datS;
    }
    private void decodeDatToTable2(String datS){
        String[] rows = datS.split("\r\n");
        MyTableModel tbm = (MyTableModel)tableValues.getModel();
        boolean setColumns = true;
        if(rows[0].startsWith("#")){
            setColumns = false;
            String[] titles = rows[0].split("\t");
            titles[0] = titles[0].substring(1);
            tbm.setColumnCount(titles.length+1);
            for(int i=0; i<titles.length; i++){
                tbm.setColumnName(titles[i], i+1);
                header.getColumnModel().getColumn(i+1).setHeaderValue(titles[i]);
            }
        }
        tbm.setRowCount(rows.length-1);
        for(int i=1; i<rows.length; i++){
            String[] columns = rows[i].split("\t");
            if(setColumns){
                tbm.setColumnCount(columns.length+1);
                setColumns = false;
            }
            for(int j=0; j<columns.length; j++)
                tbm.setValueAt(!columns[j].equals("null") ? Double.parseDouble(columns[j]) : null, i-1, j+1);
        }
    }
    private void editColumnAt(Point p){
        int columnIndex = header.columnAtPoint(p);

        if (columnIndex != -1 && columnIndex != 0){
            column = header.getColumnModel().getColumn(columnIndex);
            Rectangle columnRectangle = header.getHeaderRect(columnIndex);

            textPopup.setText(column.getHeaderValue().toString());
            renamePopup.setPreferredSize(
                new Dimension(columnRectangle.width, columnRectangle.height - 1));
            renamePopup.show(header, columnRectangle.x, 0);

            textPopup.requestFocusInWindow();
            textPopup.selectAll();
        }
    }
    private void renameColumn(){
        String newName = textPopup.getText();
        if(newName != null && !newName.equals("")){
            column.setHeaderValue(newName);
            ((MyTableModel)tableValues.getModel()).setColumnName(newName, column.getModelIndex());
            renamePopup.setVisible(false);
            header.repaint();
            ((MyComboBoxModel)comboBoxX.getModel()).fireTableColumnsChanged();
            ((MyComboBoxModel)comboBoxY.getModel()).fireTableColumnsChanged();
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MesswerteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MesswerteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MesswerteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MesswerteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MesswerteGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCalc;
    private javax.swing.JButton buttonCalcGraphically;
    private javax.swing.JButton buttonExponential;
    private javax.swing.JButton buttonLinear;
    private javax.swing.JButton buttonLoadTable;
    private javax.swing.JButton buttonPaint;
    private javax.swing.JButton buttonSaveTable;
    private javax.swing.JButton buttonSquare;
    private javax.swing.JComboBox<String> comboBoxX;
    private javax.swing.JComboBox<String> comboBoxY;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JMenuItem jMenuItemDeselectAll;
    private javax.swing.JMenuItem jMenuItemSelectAll;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JLabel labelColumns;
    private javax.swing.JLabel labelRows;
    private javax.swing.JLabel labelUnsupported;
    private javax.swing.JLabel labelX;
    private javax.swing.JLabel labelY;
    private javax.swing.JSplitPane lowerSplitVertical;
    private javax.swing.JPanel panelEdit;
    private javax.swing.JPanel panelGrahpic;
    private javax.swing.JScrollPane scrollPaneLowerText;
    private javax.swing.JScrollPane scrollPaneTable;
    private javax.swing.JScrollPane scrollPaneUpperText;
    private javax.swing.JSpinner spinnerColumns;
    private javax.swing.JSpinner spinnerRows;
    private javax.swing.JSplitPane splitHorizontal;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable tableValues;
    private JPopupMenu renamePopup;
    private JTextField textPopup;
    private JTableHeader header;
    private TableColumn column;
    private Vector<String> columnNames;
    private javax.swing.JTextArea textArea1;
    private javax.swing.JTextArea textArea2;
    private javax.swing.JToolBar toolbarGraphics;
    private javax.swing.JToolBar toolbarTable;
    private javax.swing.JSplitPane upperSplitVertical;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JCheckBoxMenuItem a;
}
